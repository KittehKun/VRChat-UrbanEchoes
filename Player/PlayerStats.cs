
using UdonSharp;
using UnityEngine;
using VRC.SDKBase;
using VRC.Udon;

/// <summary>
/// This unique class handles the player's health, money, nutrition, energy, debuffs, and other related stats for the player. Only one instance of this class should exist in the scene.
/// </summary>
public class PlayerStats : UdonSharpBehaviour
{
    //CONSTANTS
    private const float BASE_HEALTH_REGEN_TIMER = 15.0f; //The amount of time it takes to regenerate the player's health. Every 15 seconds, the player's health is regenerated by 0.2 without debuffs.
    private const float NUTRITION_DECAY_RATE = 0.25f; //The rate at which the player's nutrition is lowered. Every half second, the player's nutrition is lowered by 0.05 without debuffs.
    private const float NUTRITION_TIMER = 0.5f; //The amount of time it takes to decay the player's nutrition value.
    private const float ENERGY_DECAY_RATE = 0.25f; //The rate at which the player's energy is lowered. Every half second, the player's energy is lowered by 0.05 without debuffs.
    private const float ENERGY_TIMER = 0.5f; //The amount of time it takes to decay the player's energy value.

    //FIELDS
    [SerializeField] private bool DEBUG_MODE = false; //Whether or not to print debug messages.

    // PLAYER HEALTH STATS
    private float _playerHealth = 100; //The amount of player health
    private int _playerMaxHealth = 100; //The maximum amount of player health.
    private float _passiveHealthRegenRate = 0.2f; //The amount of health a player will passively regenerate.
    private float _passiveHealthRegenTimer = BASE_HEALTH_REGEN_TIMER;
    private double _playerMoney = 20.00; //The amount of player money. Players start with $20 and must earn more through activities.

    // PLAYER NUTRITION & ENERGY STATS
    private float _playerNutrition = 100.0f; //The amount of player nutrition. Players start with 100 and must eat to avoid debuffs. Debuffs are given based on thresholds. Thresholds are as follows. 80, 60, 40, 20, 0 (check game documentation for debuff specifices.)
    private float _nutritionTimer = NUTRITION_TIMER; //Represents how long the timer is in seconds.
    private float _playerEnergy = 100.0f; //The amount of energy a player has. Players start with 100 and must eat to avoid debuffs. Debuffs are given based on thresholds. Thresholds are as follows. 80, 60, 40, 20, 0 (check game documentation for debuff specifices.)
    private float _energyTimer = ENERGY_TIMER; //Represents how long the timer is in seconds.

    // PLAYER LEVEL STATS
    private int _playerLevel = 1; //The player's level. The player starts at level 1.
    private int _playerXP = 0; //The player's experience points. The player starts with 0 experience points.
    private int _xpToNextLevel = 100; //The amount of experience points required to reach the next level. Increases by 100 every level.
    private const int BASE_XP_TO_NEXT_LEVEL = 100;

    //PROPERTIES
    /// <summary>
    /// The player's current health. Can be set or retrieved at any time.
    /// </summary>
    /// <value>The player's current health value.</value>
    public float PlayerHealth { get { return _playerHealth; } set { _playerHealth = value; } }

    /// <summary>
    /// The player's current money. Can only be retrieved from other scripts. Must be modified internally through this script.
    /// </summary>
    /// <value>The player's current money value.</value>
    public double PlayerMoney { get { return _playerMoney; } }

    /// <summary>
    /// The player's current nutrition level. Can only be retrieved from other scripts. Must be modified internally through this script.
    /// </summary>
    /// <value>The player's current nutrition value.</value>
    public float PlayerNutrition { get { return _playerNutrition; } }

    /// <summary>
    /// The player's current energy level. Can only be retrieved from other scripts. Must be modified internally through this script.
    /// </summary>
    /// <value>The player's current energy value.</value>
    public float PlayerEnergy { get { return _playerEnergy; } }

    //Methods
    private void Start()
    {

    }

    private void Update()
    {
        PasiveHealthRegenTick();
        NutritionTick();
        EnergyTick();
    }

    /// <summary>
    /// Increases the player's health by a small amount every BASE_HEALTH_REGEN_TIMER seconds. Timer is affected by debuffs.
    /// </summary>
    private void PasiveHealthRegenTick()
    {
        //Create a timer that regenerates health every half second. Return if the timer has not yet reached 0.
        _passiveHealthRegenTimer -= Time.deltaTime;
        if (_passiveHealthRegenTimer > 0) return;

        if (_playerHealth < _playerMaxHealth)
        {
            _playerHealth += _passiveHealthRegenRate; //Regenerate the player's health by the regen rate.

        }
        else if (_playerHealth > _playerMaxHealth) //Prevents the player from having more than their max health.
        {
            _playerHealth = _playerMaxHealth;
        }

        if (DEBUG_MODE) { Debug.Log("Player Health: " + _playerHealth.ToString("0.##")); }

        //Reset the timer.
        _passiveHealthRegenTimer = BASE_HEALTH_REGEN_TIMER;
    }

    /// <summary>
    /// Decreases the player's nutrition by NUTRITION_DECAY_RATE every NUTRITION_TIMER seconds.
    /// </summary>
    private void NutritionTick()
    {
        //Create a timer that decays nutrition every half second. Return if the timer has not yet reached 0.
        _nutritionTimer -= Time.deltaTime;
        if (_nutritionTimer > 0) return;

        //Decay the player's nutrition.
        if (_playerNutrition > 0)
        {
            _playerNutrition -= NUTRITION_DECAY_RATE * Time.deltaTime;

            if (DEBUG_MODE)
            {
                Debug.Log("Player Nutrition: " + _playerNutrition.ToString("0.##"));
            }
        }
        else
        {
            _playerNutrition = 0; //Prevents the player from having a negative nutrition value.
        }

        //Reset the timer.
        _nutritionTimer = NUTRITION_TIMER;
    }

    /// <summary>
    /// Decreases the player's energy by ENERGY_DECAY_RATE every ENERGY_TIMER seconds.
    /// </summary>
    private void EnergyTick()
    {
        //Create a timer that decays energy every half second. Return if the timer has not yet reached 0.
        _energyTimer -= Time.deltaTime;
        if (_energyTimer > 0) return;

        //Decay the player's energy.
        if (_playerEnergy > 0)
        {
            _playerEnergy -= ENERGY_DECAY_RATE * Time.deltaTime;
            if (DEBUG_MODE) { Debug.Log("Player Energy: " + _playerEnergy.ToString("0.##")); }
        }
        else
        {
            _playerEnergy = 0;
        }

        //Reset the timer.
        _energyTimer = ENERGY_TIMER;
    }

    /// <summary>
    /// Adds experience points to the player. If the player gains enough XP to level up, calls LevelUp() if XP threshold is met.
    /// </summary>
    /// <param name="amount">The amount of experience points to add.</param>
    public void AddXP(int amount)
    {
        if(DEBUG_MODE) { Debug.Log("Player XP: " + _playerXP.ToString("0.##")); }

        _playerXP += amount;
        if (_playerXP >= _xpToNextLevel)
        {
            LevelUp();
        }
    }

    /// <summary>
    /// Increases the player's level by 1 and resets the player's XP to 0.
    /// </summary>
    private void LevelUp()
    {
        if(DEBUG_MODE) { Debug.Log("Player Level: " + _playerLevel.ToString("0.##")); }

        _playerXP = 0; // Resets the player's XP to 0.
        _playerLevel++; // Increases the player's level by 1.
        _xpToNextLevel = _playerLevel * BASE_XP_TO_NEXT_LEVEL; // Sets the player's XP to the next level.
    }
}

/// <summary>
/// The values that the player's debuff level can take.
/// </summary>
public enum DebuffLevel
{
    NONE = 0,
    MINOR = 1,
    MODERATE = 2,
    MAJOR = 3,
    CRITICAL = 4,
    DEADLY = 5
}